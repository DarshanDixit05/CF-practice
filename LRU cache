class Node{
public:
    int key;
    int val;
    Node*next;
    Node*prev;
    Node(int k, int v){
        key = k;
        val = v;
    }
};
class LRUCache {
int n;
map<int,Node*>mp;
Node*head = new Node(-1, -1);
Node*tail = new Node(-1, -1);
public:
    LRUCache(int capacity) {
        n = capacity;
        head->next = tail;
        tail->prev = head;
    }
    
    void deleteNode(Node*node)
    {
        Node*prevNode = node->prev;
        Node*nextNode = node->next;
        prevNode->next = nextNode;
        nextNode->prev = prevNode;
    }

    void addNode(Node*node)
    {
        Node*nextNode = head->next;
        node->next = nextNode;
        node->prev = head;
        head->next = node;
        nextNode->prev = node;
    }

    int get(int key) {
        if(mp.find(key)!=mp.end()){
            Node*currNode = mp[key];
            deleteNode(currNode);
            addNode(currNode);
            mp[key] = currNode;
            return currNode->val;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key)!=mp.end())
        {
            Node*curr = mp[key];
            mp.erase(key);
            deleteNode(curr);
        }

        if(mp.size()==n)
        {
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }

        addNode(new Node(key,value));
        mp[key] = head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
